#| warning: false
# Required Libraries
library(tidyverse)  # For data manipulation and visualization
library(terra)  # For handling raster data and geospatial operations
library(sf) # For handling vector data (shapefiles)
library(RStoolbox) # For supervised classification and accuracy assessment
# Load the Landsat imagery into R
landsat_image <- rast("data/LC09_L2SP_047026_20240716_20240717_02_T1_SR_BSTACK.tif")
# Display the Landsat image
landsat_image
# Plot the RGB composite of the Landsat image (bands 3, 2, 1 corresponding to RGB)
terra::plotRGB(landsat_image, r = 3, g = 2, b = 1, stretch = "lin")
# Load the classification polygons shapefile
my_polygons <- "outputs/shapefiles/classification_polygons_DM.shp"
class_poly <- st_read(my_polygons, quiet = TRUE)
# Ensure the geometries in the shapefile are valid
class_poly <- st_make_valid(class_poly)
# Convert the land cover class to a factor with specified levels
class_poly <- class_poly %>%
mutate(lc_class = factor(lc_class,
levels = c("Broadleaf Forest",
"Coniferous Forest",
"Exposed soil and rocks",
"High density developed",
"Low density developed",
"Non-forest vegetation",
"Water")))
# Plot the polygons over the Landsat image
terra::plotRGB(landsat_image, r = 3, g = 2, b = 1, stretch = "lin")
plot(class_poly[, "lc_class"], add = TRUE)
poly_summary <- class_poly %>%
st_drop_geometry() %>%
group_by(lc_class) %>%
summarize(n_poly = n())
poly_summary
# Assign a unique ID to each polygon for easier identification
class_poly <- tibble::rowid_to_column(class_poly, var = "ID")
set.seed(1234)
# Sample 70% of the polygons for training
poly_train <- class_poly %>%
group_by(lc_class) %>%
sample_frac(0.7) %>%
mutate(set = "training") %>%
st_cast(to = 'POLYGON')
# The remaining 30% are used for validation
poly_val <- class_poly %>%
filter(!ID %in% poly_train$ID) %>%
mutate(set = "validation") %>%
st_cast(to = 'POLYGON')
# Combine the training and validation sets
poly_set <- rbind(poly_train,
poly_val)
# Display the number of polygons in each set
table(poly_set$set)
polygon_pixels <- terra::extract(landsat_image, vect(poly_set))
# We need to perform an inner_join to retrieve lc_class
polygon_pixels <- inner_join(poly_set, polygon_pixels) %>%
st_drop_geometry()
# Calculate the number of pixels per land cover class
pixel_statistics <- polygon_pixels %>%
group_by(set, lc_class) %>%
summarize(n_px = n())
# Display the class statistics
pixel_statistics
# Calculate the number of pixels per land cover class
pixel_statistics <- polygon_pixels %>%
group_by(set, lc_class) %>%
summarize(n_px = n())
# Display the class statistics
pixel_statistics
# Reshape the data from wide to long format
polygon_pixels_long <- pivot_longer(polygon_pixels, blue:swir2,
names_to = "band", values_to = "reflectance")
# Display the reshaped data
head(polygon_pixels_long)
# Calculate spectral signatures for each land cover class and band
spectral_sign <- polygon_pixels_long %>%
group_by(lc_class, band) %>%
summarize(r_mean = mean(reflectance, na.rm = TRUE),
r_q05 = quantile(reflectance, 0.05, na.rm = TRUE),
r_q95 = quantile(reflectance, 0.95, na.rm = TRUE))
# Display the spectral signatures
spectral_sign
# Wavelength corresponding to each band
bands_wavelength <- read_csv("data/bands_wavelength.csv")
# Join the wavelength data with the spectral signatures
spectral_sign <- inner_join(spectral_sign, bands_wavelength)
# Create the spectral signature plot
ggplot(spectral_sign, aes(x = wavelength, y = r_mean, group = 1)) +
geom_point() +
geom_line() +
geom_ribbon(aes(ymin = r_q05, ymax = r_q95), alpha = 0.2) +
facet_wrap(vars(lc_class)) +
theme_bw() +
labs(x = "Wavelength (nm)", y = "Reflectance")
# Rename the land cover class column for training and validation data
poly_train <- poly_train %>%
rename(class = lc_class)
poly_val <- poly_val %>%
rename(class = lc_class)
# Perform Maximum Likelihood Classification
mlc_model <- superClass(img = landsat_image, trainData = poly_train, valData = poly_val, responseCol = "class",
model = "mlc",nSamples = 500)
# Extract the classified map from the model
classified_map <- mlc_model$map
# Write the classified map to a TIFF file
#terra::writeRaster(classified_map, filename = "outputs/classified_map.tif", overwrite = TRUE)
# Plot the classified map
terra::plot(classified_map, col = c('#C8EBA2','#5CC055','#F06A4B','#E879F8','#5FE9E9','#F7C469','#5DA7D2'))
# Extract validation predictions from the model
val_preds <- mlc_model$validation$validationSamples
# Create the confusion matrix
conf_matrix <- table(st_drop_geometry(val_preds[, c("prediction", "reference")]))
# Calculate overall accuracy (OA)
oa <- sum(diag(conf_matrix)) / sum(conf_matrix)
#Calculate user's accuracy (UA)
ua <- diag(conf_matrix / rowSums(conf_matrix))
# Calculate producer's accuracy (PA)
pa <- diag(conf_matrix / colSums(conf_matrix))
# Display the accuracy metrics
oa
ua
pa
# Wavelength corresponding to each band
bands_wavelength <- read_csv("data/bands_wavelength.csv")
# Join the wavelength data with the spectral signatures
spectral_sign <- inner_join(spectral_sign, bands_wavelength)
# Create the spectral signature plot
ggplot(spectral_sign, aes(x = wavelength, y = r_mean, group = 1)) +
geom_point() +
geom_line() +
geom_ribbon(aes(ymin = r_q05, ymax = r_q95), alpha = 0.2) +
facet_wrap(vars(lc_class)) +
theme_bw() +
labs(x = "Wavelength (nm)", y = "Reflectance")
