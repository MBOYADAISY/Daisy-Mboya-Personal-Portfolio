import arcpy
import os
import geopandas as gpd
import matplotlib.pyplot as plt
# Define paths
data_dir_path = os.path.dirname(os.getcwd())
grazing_area_shapefile_path = os.path.join(data_dir_path, "test")
rivers_shapefile_path = os.path.join(data_dir_path, "test")
output_gdb = os.path.join(data_dir_path, "California.gdb")
output_directory = os.path.join(data_dir_path, "Output")
# Set ArcPy environment to allow overwriting
arcpy.env.overwriteOutput = True
try:
# Check if geodatabase exists and delete if it does
if arcpy.Exists(output_gdb):
arcpy.Delete_management(output_gdb)
# Create a new geodatabase
arcpy.CreateFileGDB_management(data_dir_path, "California.gdb")
except arcpy.ExecuteError:
print(f"ArcPy error: {arcpy.GetMessages(2)}")
except Exception as e:
print(f"General error: {e}")
# Copy shapefiles to geodatabase
shapefile_paths = [grazing_area_shapefile_path, rivers_shapefile_path]
for shapefile_dir in shapefile_paths:
arcpy.env.workspace = shapefile_dir
fc_list = arcpy.ListFeatureClasses()
for shapefile in fc_list:
arcpy.FeatureClassToGeodatabase_conversion(shapefile, output_gdb)
# Create feature layers
arcpy.MakeFeatureLayer_management("California_Allotments", "Allotment_area_layer")
arcpy.MakeFeatureLayer_management("California_Rivers", "Rivers_layer")
# Select grazing areas without river access
arcpy.management.SelectLayerByLocation("Allotment_area_layer", "INTERSECT", "Rivers_layer", invert_spatial_relationship=True)
grazing_area_without_rivers = "grazing_area_without_rivers"
arcpy.CopyFeatures_management("Allotment_area_layer", grazing_area_without_rivers)
# Retrieve grazing area names and sizes
grazing_area_with_area = []
with arcpy.da.SearchCursor(grazing_area_without_rivers, ["ALLOTMENT_", "Shape_Area"]) as cursor:
for row in cursor:
grazing_area_with_area.append((row[0], row[1]))
# Sort grazing areas by size
sorted_grazing_area = sorted(grazing_area_with_area, key=lambda x: x[1], reverse=True)
# Plot top 10 grazing areas
plt.figure(figsize=(12, 6))
top_10_names = [area[0] for area in sorted_grazing_area[:10]]
top_10_areas = [area[1] for area in sorted_grazing_area[:10]]
bars = plt.bar(top_10_names, top_10_areas)
plt.title("Top 10 Grazing Areas Without River Access", fontsize=16)
plt.xlabel("Grazing Area Name", fontsize=12)
plt.ylabel("Area", fontsize=12)
plt.xticks(rotation=45, ha='right')
for bar in bars:
plt.text(bar.get_x() + bar.get_width()/2., bar.get_height(), f'{bar.get_height():.2f}', ha='center', va='bottom')
plt.tight_layout()
plt.savefig(os.path.join(data_dir_path, "top_10_grazing_areas_plot.png"))
# Define paths
data_dir_path = os.path.dirname(os.getcwd())
grazing_area_shapefile_path = os.path.join(data_dir_path, "test")
rivers_shapefile_path = os.path.join(data_dir_path, "test")
output_gdb = os.path.join(data_dir_path, "California.gdb")
output_directory = os.path.join(data_dir_path, "Output")
# Set ArcPy environment to allow overwriting
arcpy.env.overwriteOutput = True
import arcpy
import os
import geopandas as gpd
import matplotlib.pyplot as plt
import arcpy
import os
import geopandas as gpd
import matplotlib.pyplot as plt
# Define paths
data_dir_path = os.path.dirname(os.getcwd())
grazing_area_shapefile_path = os.path.join(data_dir_path, "test")
rivers_shapefile_path = os.path.join(data_dir_path, "test")
output_gdb = os.path.join(data_dir_path, "California.gdb")
output_directory = os.path.join(data_dir_path, "Output")
# Set ArcPy environment to allow overwriting
arcpy.env.overwriteOutput = True
try:
# Check if geodatabase exists and delete if it does
if arcpy.Exists(output_gdb):
arcpy.Delete_management(output_gdb)
# Create a new geodatabase
arcpy.CreateFileGDB_management(data_dir_path, "California.gdb")
except arcpy.ExecuteError:
print(f"ArcPy error: {arcpy.GetMessages(2)}")
except Exception as e:
print(f"General error: {e}")
# Copy shapefiles to geodatabase
shapefile_paths = [grazing_area_shapefile_path, rivers_shapefile_path]
for shapefile_dir in shapefile_paths:
arcpy.env.workspace = shapefile_dir
fc_list = arcpy.ListFeatureClasses()
for shapefile in fc_list:
arcpy.FeatureClassToGeodatabase_conversion(shapefile, output_gdb)
# Create feature layers
arcpy.MakeFeatureLayer_management("California_Allotments", "Allotment_area_layer")
arcpy.MakeFeatureLayer_management("California_Rivers", "Rivers_layer")
# Select grazing areas without river access
arcpy.management.SelectLayerByLocation("Allotment_area_layer", "INTERSECT", "Rivers_layer", invert_spatial_relationship=True)
grazing_area_without_rivers = "grazing_area_without_rivers"
arcpy.CopyFeatures_management("Allotment_area_layer", grazing_area_without_rivers)
# Retrieve grazing area names and sizes
grazing_area_with_area = []
with arcpy.da.SearchCursor(grazing_area_without_rivers, ["ALLOTMENT_", "Shape_Area"]) as cursor:
for row in cursor:
grazing_area_with_area.append((row[0], row[1]))
# Sort grazing areas by size
sorted_grazing_area = sorted(grazing_area_with_area, key=lambda x: x[1], reverse=True)
# Plot top 10 grazing areas
plt.figure(figsize=(12, 6))
top_10_names = [area[0] for area in sorted_grazing_area[:10]]
top_10_areas = [area[1] for area in sorted_grazing_area[:10]]
bars = plt.bar(top_10_names, top_10_areas)
plt.title("Top 10 Grazing Areas Without River Access", fontsize=16)
plt.xlabel("Grazing Area Name", fontsize=12)
plt.ylabel("Area", fontsize=12)
plt.xticks(rotation=45, ha='right')
for bar in bars:
plt.text(bar.get_x() + bar.get_width()/2., bar.get_height(), f'{bar.get_height():.2f}', ha='center', va='bottom')
plt.tight_layout()
plt.savefig(os.path.join(data_dir_path, "top_10_grazing_areas_plot.png"))
x = 7
x
import arcpy
import os
import geopandas as gpd
import matplotlib.pyplot as plt
# Define paths
data_dir_path = os.path.dirname(os.getcwd())
grazing_area_shapefile_path = os.path.join(data_dir_path, "test")
rivers_shapefile_path = os.path.join(data_dir_path, "test")
output_gdb = os.path.join(data_dir_path, "California.gdb")
output_directory = os.path.join(data_dir_path, "Output")
# Set ArcPy environment to allow overwriting
arcpy.env.overwriteOutput = True
try:
# Check if geodatabase exists and delete if it does
if arcpy.Exists(output_gdb):
arcpy.Delete_management(output_gdb)
# Create a new geodatabase
arcpy.CreateFileGDB_management(data_dir_path, "California.gdb")
except arcpy.ExecuteError:
print(f"ArcPy error: {arcpy.GetMessages(2)}")
except Exception as e:
print(f"General error: {e}")
# Copy shapefiles to geodatabase
shapefile_paths = [grazing_area_shapefile_path, rivers_shapefile_path]
for shapefile_dir in shapefile_paths:
arcpy.env.workspace = shapefile_dir
fc_list = arcpy.ListFeatureClasses()
for shapefile in fc_list:
arcpy.FeatureClassToGeodatabase_conversion(shapefile, output_gdb)
# Create feature layers
arcpy.MakeFeatureLayer_management("California_Allotments", "Allotment_area_layer")
arcpy.MakeFeatureLayer_management("California_Rivers", "Rivers_layer")
# Select grazing areas without river access
arcpy.management.SelectLayerByLocation("Allotment_area_layer", "INTERSECT", "Rivers_layer", invert_spatial_relationship=True)
grazing_area_without_rivers = "grazing_area_without_rivers"
arcpy.CopyFeatures_management("Allotment_area_layer", grazing_area_without_rivers)
# Retrieve grazing area names and sizes
grazing_area_with_area = []
with arcpy.da.SearchCursor(grazing_area_without_rivers, ["ALLOTMENT_", "Shape_Area"]) as cursor:
for row in cursor:
grazing_area_with_area.append((row[0], row[1]))
# Sort grazing areas by size
sorted_grazing_area = sorted(grazing_area_with_area, key=lambda x: x[1], reverse=True)
# Plot top 10 grazing areas
plt.figure(figsize=(12, 6))
top_10_names = [area[0] for area in sorted_grazing_area[:10]]
top_10_areas = [area[1] for area in sorted_grazing_area[:10]]
bars = plt.bar(top_10_names, top_10_areas)
plt.title("Top 10 Grazing Areas Without River Access", fontsize=16)
plt.xlabel("Grazing Area Name", fontsize=12)
plt.ylabel("Area", fontsize=12)
plt.xticks(rotation=45, ha='right')
for bar in bars:
plt.text(bar.get_x() + bar.get_width()/2., bar.get_height(), f'{bar.get_height():.2f}', ha='center', va='bottom')
plt.tight_layout()
plt.savefig(os.path.join(data_dir_path, "top_10_grazing_areas_plot.png"))
import arcpy
import os
import geopandas as gpd
import matplotlib.pyplot as plt
import arcpy
import os
import geopandas as gpd
import matplotlib.pyplot as plt
# Define paths
data_dir_path = os.path.dirname(os.getcwd())
grazing_area_shapefile_path = os.path.join(data_dir_path, "test")
rivers_shapefile_path = os.path.join(data_dir_path, "test")
output_gdb = os.path.join(data_dir_path, "California.gdb")
output_directory = os.path.join(data_dir_path, "Output")
# Set ArcPy environment to allow overwriting
arcpy.env.overwriteOutput = True
try:
# Check if geodatabase exists and delete if it does
if arcpy.Exists(output_gdb):
arcpy.Delete_management(output_gdb)
# Create a new geodatabase
arcpy.CreateFileGDB_management(data_dir_path, "California.gdb")
except arcpy.ExecuteError:
print(f"ArcPy error: {arcpy.GetMessages(2)}")
except Exception as e:
print(f"General error: {e}")
# Copy shapefiles to geodatabase
shapefile_paths = [grazing_area_shapefile_path, rivers_shapefile_path]
for shapefile_dir in shapefile_paths:
arcpy.env.workspace = shapefile_dir
fc_list = arcpy.ListFeatureClasses()
for shapefile in fc_list:
arcpy.FeatureClassToGeodatabase_conversion(shapefile, output_gdb)
# Create feature layers
arcpy.MakeFeatureLayer_management("California_Allotments", "Allotment_area_layer")
arcpy.MakeFeatureLayer_management("California_Rivers", "Rivers_layer")
# Select grazing areas without river access
arcpy.management.SelectLayerByLocation("Allotment_area_layer", "INTERSECT", "Rivers_layer", invert_spatial_relationship=True)
grazing_area_without_rivers = "grazing_area_without_rivers"
arcpy.CopyFeatures_management("Allotment_area_layer", grazing_area_without_rivers)
# Retrieve grazing area names and sizes
grazing_area_with_area = []
with arcpy.da.SearchCursor(grazing_area_without_rivers, ["ALLOTMENT_", "Shape_Area"]) as cursor:
for row in cursor:
grazing_area_with_area.append((row[0], row[1]))
# Sort grazing areas by size
sorted_grazing_area = sorted(grazing_area_with_area, key=lambda x: x[1], reverse=True)
# Plot top 10 grazing areas
plt.figure(figsize=(12, 6))
top_10_names = [area[0] for area in sorted_grazing_area[:10]]
top_10_areas = [area[1] for area in sorted_grazing_area[:10]]
bars = plt.bar(top_10_names, top_10_areas)
plt.title("Top 10 Grazing Areas Without River Access", fontsize=16)
plt.xlabel("Grazing Area Name", fontsize=12)
plt.ylabel("Area", fontsize=12)
plt.xticks(rotation=45, ha='right')
for bar in bars:
plt.text(bar.get_x() + bar.get_width()/2., bar.get_height(), f'{bar.get_height():.2f}', ha='center', va='bottom')
plt.tight_layout()
plt.savefig(os.path.join(data_dir_path, "top_10_grazing_areas_plot.png"))
import arcpy
import os
import geopandas as gpd
import matplotlib.pyplot as plt
# Define paths
data_dir_path = os.path.dirname(os.getcwd())
grazing_area_shapefile_path = os.path.join(data_dir_path, "test")
rivers_shapefile_path = os.path.join(data_dir_path, "test")
output_gdb = os.path.join(data_dir_path, "California.gdb")
output_directory = os.path.join(data_dir_path, "Output")
# Set ArcPy environment to allow overwriting
arcpy.env.overwriteOutput = True
try:
# Check if geodatabase exists and delete if it does
if arcpy.Exists(output_gdb):
arcpy.Delete_management(output_gdb)
# Create a new geodatabase
arcpy.CreateFileGDB_management(data_dir_path, "California.gdb")
except arcpy.ExecuteError:
print(f"ArcPy error: {arcpy.GetMessages(2)}")
except Exception as e:
print(f"General error: {e}")
# Copy shapefiles to geodatabase
shapefile_paths = [grazing_area_shapefile_path, rivers_shapefile_path]
for shapefile_dir in shapefile_paths:
arcpy.env.workspace = shapefile_dir
fc_list = arcpy.ListFeatureClasses()
for shapefile in fc_list:
arcpy.FeatureClassToGeodatabase_conversion(shapefile, output_gdb)
# Create feature layers
arcpy.MakeFeatureLayer_management("California_Allotments", "Allotment_area_layer")
arcpy.MakeFeatureLayer_management("California_Rivers", "Rivers_layer")
# Select grazing areas without river access
arcpy.management.SelectLayerByLocation("Allotment_area_layer", "INTERSECT", "Rivers_layer", invert_spatial_relationship=True)
grazing_area_without_rivers = "grazing_area_without_rivers"
arcpy.CopyFeatures_management("Allotment_area_layer", grazing_area_without_rivers)
# Retrieve grazing area names and sizes
grazing_area_with_area = []
with arcpy.da.SearchCursor(grazing_area_without_rivers, ["ALLOTMENT_", "Shape_Area"]) as cursor:
for row in cursor:
grazing_area_with_area.append((row[0], row[1]))
# Sort grazing areas by size
sorted_grazing_area = sorted(grazing_area_with_area, key=lambda x: x[1], reverse=True)
# Plot top 10 grazing areas
plt.figure(figsize=(12, 6))
top_10_names = [area[0] for area in sorted_grazing_area[:10]]
top_10_areas = [area[1] for area in sorted_grazing_area[:10]]
bars = plt.bar(top_10_names, top_10_areas)
plt.title("Top 10 Grazing Areas Without River Access", fontsize=16)
plt.xlabel("Grazing Area Name", fontsize=12)
plt.ylabel("Area", fontsize=12)
plt.xticks(rotation=45, ha='right')
for bar in bars:
plt.text(bar.get_x() + bar.get_width()/2., bar.get_height(), f'{bar.get_height():.2f}', ha='center', va='bottom')
plt.tight_layout()
plt.savefig(os.path.join(data_dir_path, "top_10_grazing_areas_plot.png"))
